// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  // previewFeatures = ["nativeTypes"]
}

model User {
  id           String    @id @default(cuid())
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  name         String
  email        String    @unique
  googleUserId String?   @unique
  githubUserId String?   @unique
  avatar       String?
  members      Member[]
  // A `PRO` user can create multiple teamsï¼Œbut a `FREE` user can't
  type         UserType  @default(FREE)
  // A free user can create 3 projects at most
  projects     Project[]
  comment      Comment[]
}

model Member {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  team      Team     @relation(fields: [teamId], references: [id])
  teamId    String
  role      Role     @default(USER)
}

model Team {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  name      String
  members   Member[]
  project   Project[]
}

/// A project is associated with a `FREE` user or a Team(create by `PRO` user)
/// A project has multiple pages
model Project {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  // 64 chars
  name      String
  team      Team?    @relation(fields: [teamId], references: [id])
  teamId    String?
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
  pages     Page[]
}

/// A page has multiple comments
model Page {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  // Embedded page's url, should not include query parameter. e.g. /post?id=123
  url       String
  title     String
  comments  Comment[]
  project   Project   @relation(fields: [projectId], references: [id])
  projectId String
}

model Comment {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User   @relation(fields: [userId], references: [id])
  userId  String
  // User input: Slate.js data
  content Json

  page   Page   @relation(fields: [pageId], references: [id])
  pageId String

  replies   Comment[] @relation("RepliesToComment")
  comment   Comment?  @relation("RepliesToComment", fields: [commentId], references: [id])
  commentId String?
}

enum Role {
  USER
  ADMIN
}

enum UserType {
  FREE
  PRO
}
