fragment adapterUser on User {
  id
  name
  avatar
  email
  emailVerified
  username
  bio
  website
  twitterUserName
}

mutation updateUserByPk(
  $id: uuid!
  $username: String
  $bio: String = ""
  $website: String = ""
  $twitterUserName: String = ""
) {
  updateUserByPk(
    pk_columns: { id: $id }
    _set: { username: $username, bio: $bio, website: $website, twitterUserName: $twitterUserName }
  ) {
    id
  }
}

mutation updateUserProfileByPk(
  $id: uuid!
  $name: String
  $email: String
  $avatar: String
  $emailVerified: timestamptz
) {
  updateUserByPk(
    pk_columns: { id: $id }
    _set: { name: $name, email: $email, avatar: $avatar, emailVerified: $emailVerified }
  ) {
    ...adapterUser
  }
}
mutation updateUserProfileByEmail(
  $email: String!
  $name: String
  $avatar: String
  $emailVerified: timestamptz
) {
  updateUsers(
    where: { email: { _eq: $email } }
    _set: { name: $name, avatar: $avatar, emailVerified: $emailVerified }
  ) {
    returning {
      ...adapterUser
    }
  }
}

query userByPk($id: uuid!) {
  userByPk(id: $id) {
    id
    email
    username
    type
    avatar
    name
    emailVerified
    updatedAt
    createdAt
  }
}

query userByEmail($email: String!) {
  users(where: { email: { _eq: $email } }) {
    ...adapterUser
  }
}

query userByAccount($provider: String!, $providerAccountId: String!) {
  users(
    where: {
      accounts: { provider: { _eq: $provider }, providerAccountId: { _eq: $providerAccountId } }
    }
  ) {
    ...adapterUser
  }
}

query allUsers {
  users {
    username
  }
}

mutation deleteUser($id: uuid!) {
  deleteUserByPk(id: $id) {
    id
  }
}

mutation createUser($name: String, $email: String, $emailVerified: timestamptz, $avatar: String) {
  insertOneUser(
    object: { name: $name, email: $email, emailVerified: $emailVerified, avatar: $avatar }
  ) {
    ...adapterUser
  }
}
