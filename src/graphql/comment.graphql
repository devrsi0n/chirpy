# Used in pages/widget/comment/[pageId].tsx
# Must sync with src/utilities/comment-request.ts
query commentTree($pageId: uuid!) {
  comments(
    where: { pageId: { _eq: $pageId }, parentId: { _is_null: true } }
    order_by: { likes_aggregate: { count: desc }, createdAt: asc }
  ) {
    id
    content
    createdAt
    parentId
    pageId
    depth
    user {
      id
      displayName
      avatar
    }
    likes {
      id
      userId
    }
    replies(order_by: { likes_aggregate: { count: desc }, createdAt: asc }) {
      id
      content
      createdAt
      parentId
      pageId
      depth
      user {
        id
        displayName
        avatar
      }
      likes {
        id
        userId
      }
      replies(order_by: { likes_aggregate: { count: desc }, createdAt: asc }) {
        id
        content
        createdAt
        parentId
        pageId
        depth
        user {
          id
          displayName
          avatar
        }
        likes {
          id
          userId
        }
      }
    }
  }
}

# Query ancestors and children
# Must sync with src/utilities/comment-request.ts
query commentDetails($id: uuid!) {
  commentByPk(id: $id) {
    id
    content
    createdAt
    parentId
    pageId
    depth
    user {
      id
      displayName
      avatar
      __typename
    }
    likes {
      id
      userId
      __typename
    }
    replies(order_by: { likes_aggregate: { count: desc }, createdAt: asc }) {
      id
      content
      createdAt
      parentId
      pageId
      depth
      user {
        id
        displayName
        avatar
      }
      likes {
        id
        userId
      }
    }
    parent {
      id
      content
      createdAt
      parentId
      pageId
      depth
      user {
        id
        displayName
        avatar
      }
      likes {
        id
        userId
      }
      parent {
        id
        content
        createdAt
        parentId
        pageId
        depth
        user {
          id
          displayName
          avatar
        }
        likes {
          id
          userId
        }
        parent {
          id
          content
          createdAt
          parentId
          pageId
          depth
          user {
            id
            displayName
            avatar
          }
          likes {
            id
            userId
          }
        }
      }
    }
  }
}

mutation insertOneComment($content: jsonb!, $parentId: uuid, $pageId: uuid!, $depth: Int!) {
  insertOneComment(
    object: { content: $content, parentId: $parentId, pageId: $pageId, depth: $depth }
  ) {
    id
  }
}
