fragment commentContent on Comment {
  id
  content
  createdAt
  parentId
  pageId
  page {
    project {
      theme
    }
  }
  depth
  user {
    id
    displayName
    avatar
  }
  likes {
    id
    userId
  }
}

# Used in pages/widget/comment/[pageId].tsx
# Must sync with src/utilities/comment-request.ts
query commentTree($pageId: uuid!) {
  comments(
    where: { pageId: { _eq: $pageId }, parentId: { _is_null: true } }
    order_by: { likes_aggregate: { count: desc }, createdAt: asc }
  ) {
    ...commentContent
    replies(order_by: { likes_aggregate: { count: desc }, createdAt: asc }) {
      ...commentContent
      replies(order_by: { likes_aggregate: { count: desc }, createdAt: asc }) {
        ...commentContent
      }
    }
  }
}

# Query ancestors and children
# Must sync with src/utilities/comment-request.ts
query commentDetails($id: uuid!) {
  commentByPk(id: $id) {
    ...commentContent
    replies(order_by: { likes_aggregate: { count: desc }, createdAt: asc }) {
      ...commentContent
    }
    parent {
      ...commentContent
      parent {
        ...commentContent
        parent {
          ...commentContent
        }
      }
    }
  }
}

mutation insertOneComment($content: jsonb!, $parentId: uuid, $pageId: uuid!, $depth: Int!) {
  insertOneComment(
    object: { content: $content, parentId: $parentId, pageId: $pageId, depth: $depth }
  ) {
    id
  }
}
