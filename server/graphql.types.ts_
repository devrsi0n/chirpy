import { Length, MaxLength } from 'class-validator';
import { Field, ID, ObjectType, registerEnumType, Authorized, InputType } from 'type-graphql';

export enum Role {
  USER = 'USER',
  ADMIN = 'ADMIN',
}

registerEnumType(Role, {
  name: 'Role',
});

@ObjectType()
export class GqlUser {
  @Field((type) => ID)
  id: string;

  @Field()
  @MaxLength(32)
  name: string;

  @Field()
  email: string;

  @Field({ nullable: true })
  avatar?: string;

  @Field((type) => [GqlMember], { nullable: true })
  members?: GqlMember[];
}

@ObjectType()
export class GqlTeam {
  @Field((type) => ID)
  id: string;

  @Field()
  @MaxLength(32)
  name: string;

  @Field((type) => [GqlMember])
  members: GqlMember[];
}

@ObjectType()
export class GqlMember {
  @Field((type) => ID)
  id: string;

  @Field((type) => ID)
  userId: string;

  @Field((type) => GqlUser)
  user: GqlUser;

  @Field((type) => ID)
  teamId: string;

  @Field((type) => GqlTeam)
  team: GqlTeam;

  @Field((type) => Role)
  role: Role;
}

@ObjectType()
export class GqlProject {
  @Field((type) => ID)
  id: string;

  @Field()
  name: string;

  @Field((type) => ID)
  teamId: string;

  @Field((type) => GqlTeam)
  team: GqlTeam;
}

@InputType()
export class GqlProjectInput {
  @Field()
  @Length(3, 64)
  name: string;
}
