generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("SUPABASE_URL")
  relationMode = "prisma"
}

// String -> varchar(191)

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  oauthTokenSecret  String?
  oauthToken        String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Comment {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  pageId    String
  parentId  String?
  userId    String
  content   Json
  deletedAt DateTime?
  page      Page      @relation(fields: [pageId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  parent    Comment?  @relation("CommentToComment", fields: [parentId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  replies   Comment[] @relation("CommentToComment")
  likes     Like[]

  @@index([pageId])
  @@index([parentId])
  @@index([userId])
}

model Like {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  commentId String
  userId    String
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([commentId, userId])
  @@index([userId])
}

model Member {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  teamId    String
  userId    String
  role      String
  Role      Role     @relation(fields: [role], references: [value], onDelete: Cascade, onUpdate: Cascade)
  team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([teamId, userId])
  @@index([role])
  @@index([userId])
}

model NotificationMessage {
  id               String           @id @default(cuid())
  createdAt        DateTime         @default(now())
  type             String
  recipientId      String
  url              String           @db.Text
  read             Boolean          @default(false)
  deletedAt        DateTime?
  triggeredById    String
  // TODO: Replace it with commentId & likeId
  contextId        String
  content          String?          @db.Text
  recipient        User             @relation("NotificationMessage_recipientIdToUser", fields: [recipientId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  triggeredBy      User             @relation("NotificationMessage_triggeredByIdToUser", fields: [triggeredById], references: [id], onDelete: Cascade, onUpdate: Cascade)
  NotificationType NotificationType @relation(fields: [type], references: [value], onDelete: Cascade, onUpdate: Cascade)

  @@unique([type, triggeredById, contextId, recipientId])
  @@index([recipientId])
  @@index([triggeredById])
}

model NotificationSubscription {
  id           String    @id @default(cuid())
  userId       String
  subscription Json
  createdAt    DateTime? @default(now())
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  // Check uniqueness muanually because mysql doesn't allow it
  // @@unique([subscription, userId])

  @@index([userId])
}

model NotificationType {
  value                String                @id
  comment              String
  notificationMessages NotificationMessage[]
}

model Page {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  url       String    @unique() @db.Text
  title     String?   @db.Text
  projectId String
  project   Project   @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  comments  Comment[]
  authorId  String?
  author    User?     @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([projectId])
}

model Project {
  id              String   @id @default(cuid())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  name            String
  teamId          String?
  userId          String?
  theme           Json?
  domain          String   @unique
  team            Team?    @relation(fields: [teamId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user            User?    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  pages           Page[]
  // Extra page identifiers, separated by commas
  queryParameters String?

  @@index([teamId])
  @@index([userId])
}

model Role {
  value   String   @id
  comment String?
  members Member[]
}

model Session {
  id           String   @id @default(cuid())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([userId])
}

model Team {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  name      String
  uid       String?   @unique
  members   Member[]
  projects  Project[]
}

model User {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name            String?
  email           String?   @unique
  emailVerified   DateTime?
  image           String?   @db.Text
  username        String?   @unique
  bio             String?
  website         String?
  twitterUserName String?
  accounts        Account[]

  comments                      Comment[]
  likes                         Like[]
  members                       Member[]
  receivedNotificationMessages  NotificationMessage[]      @relation("NotificationMessage_recipientIdToUser")
  triggeredNotificationMessages NotificationMessage[]      @relation("NotificationMessage_triggeredByIdToUser")
  notificationSubscriptions     NotificationSubscription[]
  projects                      Project[]
  sessions                      Session[]

  settings Settings?

  plan                     Plan?   @default(HOBBY)
  // Billing cycle start day
  billingCycleDay          Int?
  stripeCustomerId         String? @unique
  stripeSubscriptionId     String? @unique
  // For usage reporting
  stripeSubscriptionItemId String?

  pages                    Page[]
}

enum Plan {
  HOBBY
  PRO
  ENTERPRISE
}

model Settings {
  id String @id @default(cuid())

  // Email
  emailReply   Boolean @default(true)
  emailUsage   Boolean @default(true)
  emailReceipt Boolean @default(true)

  // Web push
  webPushReply   Boolean @default(true)
  webPushUsage   Boolean @default(true)
  webPushReceipt Boolean @default(true)

  sdkKey String? @unique

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  id         String   @id @default(cuid())

  @@unique([identifier, token])
}
