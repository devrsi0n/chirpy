generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// String -> varchar(191)

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  oauthTokenSecret  String?
  oauthToken        String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Comment {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  pageId    String
  parentId  String?
  userId    String
  content   Json
  deletedAt DateTime?
  page      Page      @relation(fields: [pageId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  parent    Comment?  @relation("CommentToComment", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  replies   Comment[] @relation("CommentToComment")
  likes     Like[]

  @@index([pageId])
  @@index([parentId])
  @@index([userId])
}

model Like {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  commentId String
  userId    String
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([commentId, userId])
  @@index([userId])
}

model Member {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  teamId    String
  userId    String
  role      String
  Role      Role     @relation(fields: [role], references: [value], onDelete: Cascade, onUpdate: Cascade)
  team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([teamId, userId])
  @@index([role])
  @@index([userId])
}

model NotificationMessage {
  id               String           @id @default(cuid())
  createdAt        DateTime         @default(now())
  type             String
  recipientId      String
  url              String           @db.Text
  read             Boolean          @default(false)
  deletedAt        DateTime?
  triggeredById    String
  // TODO: Replace it with commentId & likeId
  contextId        String
  content          String?          @db.Text
  recipient        User             @relation("NotificationMessage_recipientIdToUser", fields: [recipientId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  triggeredBy      User             @relation("NotificationMessage_triggeredByIdToUser", fields: [triggeredById], references: [id], onDelete: Cascade, onUpdate: Cascade)
  NotificationType NotificationType @relation(fields: [type], references: [value], onDelete: Cascade, onUpdate: Cascade)

  @@unique([type, triggeredById, contextId, recipientId])
  @@index([recipientId])
  @@index([triggeredById])
}

model NotificationSubscription {
  id           String    @id @default(cuid())
  userId       String
  subscription Json
  createdAt    DateTime? @default(now())
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  // Check uniqueness muanually because mysql doesn't allow it
  // @@unique([subscription, userId])

  @@index([userId])
}

model NotificationType {
  value                String                @id
  comment              String
  notificationMessages NotificationMessage[]
}

model Page {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  url       String    @unique(length: 191) @db.Text
  title     String?   @db.Text
  projectId String
  project   Project   @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  comments  Comment[]

  @@index([projectId])
}

// For comment widget
model Project {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  teamId    String?
  userId    String?
  theme     Json?
  domain    String   @unique
  team      Team?    @relation(fields: [teamId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  pages     Page[]

  @@index([teamId])
  @@index([userId])
}

model Role {
  value   String   @id
  comment String?
  members Member[]
}

model Session {
  id           String   @id @default(cuid())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([userId])
}

// Deprecated, link member to project directly
model Team {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  name      String
  uid       String?   @unique
  members   Member[]
  projects  Project[]
}

model User {
  id                            String                     @id @default(cuid())
  createdAt                     DateTime                   @default(now())
  updatedAt                     DateTime                   @updatedAt
  name                          String?
  email                         String?                    @unique
  emailVerified                 DateTime?
  image                         String?                    @db.Text
  username                      String?                    @unique
  bio                           String?
  website                       String?
  twitterUserName               String?
  kind                          UserKind                   @default(USER)
  accounts                      Account[]
  comments                      Comment[]
  likes                         Like[]
  members                       Member[]
  receivedNotificationMessages  NotificationMessage[]      @relation("NotificationMessage_recipientIdToUser")
  triggeredNotificationMessages NotificationMessage[]      @relation("NotificationMessage_triggeredByIdToUser")
  notificationSubscriptions     NotificationSubscription[]
  projects                      Project[]
  sessions                      Session[]
  // User as blog site manager
  managedBlogSites              BlogSite[]
  // User as blog site member
  blogSiteMembers               BlogSiteMember[]
  // User as docs site manager
  managedDocsSites              DocsSite[]
  // User as docs site member
  docsSiteMembers               DocsSiteMember[]
  // Null means free plan
  planId                        String?
  plan                          Plan?                      @relation(fields: [planId], references: [id], onDelete: NoAction, onUpdate: Cascade)
  billingCycleStart             Int? // day of the month when the billing cycle starts
  sentEmails                    SentEmail[]

  // Deprecated
  type     String?
  // Deprecated
  userType UserType? @relation(fields: [type], references: [value], onDelete: Cascade, onUpdate: Cascade)

  @@index([kind])
  @@index([email])
  @@index([planId])
  @@index([type])
}

// Deprecated
model UserType {
  value   String  @id
  comment String?
  users   User[]
}

enum UserKind {
  ADMIN
  // Normal user with email or social accounts
  USER
  // User without email
  ANONYMOUS
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  id         String   @id @default(cuid())

  @@unique([identifier, token])
}

model BlogSite {
  id           String           @id @default(cuid())
  name         String
  subdomain    String           @unique
  // Notion page url
  pageUrl      String           @db.Text
  description  String?          @db.Text
  logo         String?
  customDomain String?          @unique
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  managerId    String
  manager      User             @relation(fields: [managerId], references: [id])
  posts        Post[]
  members      BlogSiteMember[]
  sentEmails   SentEmail[]

  @@index([managerId])
}

model Post {
  id         String   @id @default(cuid())
  // Notion page id
  pageId     String
  slug       String   @default(cuid())
  title      String   @default("Untitled")
  coverImage String?
  // Notion page content record map
  recordMap  Json?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  published  Boolean  @default(false)
  site       BlogSite @relation(fields: [siteId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  siteId     String

  // Slug is unique per site, but not unique globally
  @@unique([slug, siteId], name: "post_slug_site_constraint")
  // Page id is unique per site, but not unique globally
  @@unique([pageId, siteId], name: "post_pageId_site_constraint")
  @@index([siteId])
  @@index([slug])
}

enum BlogSiteRole {
  EDITOR
}

model BlogSiteMember {
  id        String       @id @default(cuid())
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  role      BlogSiteRole
  siteId    String
  site      BlogSite     @relation(fields: [siteId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    String
  user      User         @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([siteId, userId])
  @@index([role])
  @@index([userId])
}

model DocsSite {
  id           String           @id @default(cuid())
  name         String
  subdomain    String           @unique
  // Notion page url
  pageUrl      String           @db.Text
  // Notion page record map
  recordMap    Json
  description  String?          @db.Text
  logo         String?
  customDomain String?          @unique
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  managerId    String
  manager      User             @relation(fields: [managerId], references: [id])
  docs         Doc[]
  members      DocsSiteMember[]
  sentEmails   SentEmail[]

  @@index([managerId])
}

model Doc {
  id        String   @id @default(cuid())
  // Notion page id
  pageId    String
  slug      String   @default(cuid())
  // Notion page content record map
  recordMap Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  published Boolean  @default(false)
  siteId    String
  site      DocsSite @relation(fields: [siteId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  // Slug is unique per site, but not unique globally
  @@unique([slug, siteId], name: "doc_slug_docsSite_constraint")
  // Page id is unique per site, but not unique globally
  @@unique([pageId, siteId], name: "doc_pageId_docsSite_constraint")
  @@index([siteId])
  @@index([slug])
}

enum DocsSiteRole {
  EDITOR
}

model DocsSiteMember {
  id        String       @id @default(cuid())
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  role      DocsSiteRole
  userId    String
  user      User         @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  siteId    String
  site      DocsSite     @relation(fields: [siteId], references: [id])

  @@unique([siteId, userId])
  @@index([role])
  @@index([userId])
}

enum PlanType {
  FREE // Free 14 days trial, 1k pv
  USAGE1 // 5k pv / month
  USAGE2 // 10k pv / month
  USAGE3 // 25K pv / month
  USAGE4 // 50K pv / month
  USAGE5 // 100K pv / month
  USAGE6 // 500K pv / month
  USAGE7 // 1m pv / month
  // ENTERPRISE
}

// Payment subscription plan (monthly)
model Plan {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  type      PlanType @unique
  // Page view upper limit
  pv        Int
  users     User[]
}

enum EmailType {
  DOMAIN_INVALID
  USAGE_EXCEEDED
}

model SentEmail {
  id         String    @id @default(cuid())
  type       EmailType
  // e.g. Sent 5 usage exceeded emails
  // Should be reset after user upgrade plan
  count      Int       @default(1)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  userId     String
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  // Used for domain invalid email
  blogSiteId String?
  blogSite   BlogSite? @relation(fields: [blogSiteId], references: [id], onDelete: Cascade)
  docsSiteId String?
  docsSite   DocsSite? @relation(fields: [docsSiteId], references: [id], onDelete: Cascade)

  // Account level email, e.g. usage exceeded
  @@unique([type, userId])
  // Site level email, e.g. domain invalid
  @@unique([type, userId, blogSiteId])
  @@unique([type, userId, docsSiteId])
  @@index([userId])
  @@index([blogSiteId])
  @@index([docsSiteId])
}
