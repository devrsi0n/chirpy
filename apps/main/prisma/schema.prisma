generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// String -> varchar(191)

model Account {
  id                String    @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refreshToken      String?   @db.Text
  accessToken       String?   @db.Text
  expiresAt         DateTime?
  tokenType         String?
  scope             String?
  idToken           String?   @db.Text
  sessionState      String?
  oauthTokenSecret  String?
  oauthToken        String?
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([providerAccountId, provider])
}

model Comment {
  id            String    @id @default(cuid())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  pageId        String
  parentId      String?
  userId        String
  content       Json
  deletedAt     DateTime?
  page          Page      @relation(fields: [pageId], references: [id], onDelete: Cascade)
  parent       Comment?  @relation("CommentToComment", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  replies Comment[] @relation("CommentToComment")
  likes          Like[]
}

model Like {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  commentId String
  userId    String
  Comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([commentId, userId])
}

model Member {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  teamId    String
  userId    String
  role      String
  Role      Role     @relation(fields: [role], references: [value], onDelete: Cascade)
  Team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([teamId, userId])
}

model NotificationMessage {
  id                                           String           @id @default(cuid())
  createdAt                                    DateTime         @default(now())
  type                                         String
  recipientId                                  String
  url                                          String           @db.Text
  read                                         Boolean
  deletedAt                                    DateTime?
  triggeredById                                String
  contextId                                    String
  content                                      String?          @db.Text
  User_NotificationMessage_recipientIdToUser   User             @relation("NotificationMessage_recipientIdToUser", fields: [recipientId], references: [id], onDelete: Cascade)
  User_NotificationMessage_triggeredByIdToUser User             @relation("NotificationMessage_triggeredByIdToUser", fields: [triggeredById], references: [id], onDelete: Cascade)
  NotificationType                             NotificationType @relation(fields: [type], references: [value], onDelete: Cascade)

  @@unique([type, triggeredById, contextId, recipientId])
}

model NotificationSubscription {
  id           String    @id @default(cuid())
  userId       String
  subscription Json
  createdAt    DateTime? @default(now())
  User         User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Check uniqueness muanually because mysql doesn't allow it
  // @@unique([subscription, userId])
}

model NotificationType {
  value               String                @id
  comment             String
  NotificationMessage NotificationMessage[]
}

model Page {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  url       String    @unique(length: 191) @db.Text
  title     String?   @db.Text
  projectId String
  Project   Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  Comment   Comment[]
}

model Project {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  teamId    String?
  userId    String?
  theme     Json?
  domain    String   @unique
  Team      Team?    @relation(fields: [teamId], references: [id], onDelete: Cascade)
  User      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  Page      Page[]
}

model Role {
  value   String   @id
  comment String?
  Member  Member[]
}

model Session {
  id           String   @id @default(cuid())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  sessionToken String   @unique
  userId       String
  expires      DateTime
  User         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Team {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  name      String
  uid       String?   @unique
  Member    Member[]
  Project   Project[]
}

model User {
  id                                                          String                     @id @default(cuid())
  createdAt                                                   DateTime                   @default(now())
  updatedAt                                                   DateTime                   @updatedAt
  name                                                        String?
  email                                                       String?                    @unique
  emailVerified                                               DateTime?
  image                                                       String?                    @db.Text
  username                                                    String?                    @unique
  type                                                        String?
  bio                                                         String?
  website                                                     String?
  twitterUserName                                             String?
  UserType                                                    UserType?                  @relation(fields: [type], references: [value], onDelete: Cascade)
  Account                                                     Account[]
  Comment                                                     Comment[]
  Like                                                        Like[]
  Member                                                      Member[]
  NotificationMessage_NotificationMessage_recipientIdToUser   NotificationMessage[]      @relation("NotificationMessage_recipientIdToUser")
  NotificationMessage_NotificationMessage_triggeredByIdToUser NotificationMessage[]      @relation("NotificationMessage_triggeredByIdToUser")
  NotificationSubscription                                    NotificationSubscription[]
  Project                                                     Project[]
  Session                                                     Session[]
}

model UserType {
  value   String @id
  comment String?
  User    User[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  id         String   @id @default(cuid())

  @@unique([identifier, token])
}
