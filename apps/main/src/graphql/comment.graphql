fragment commentItem on Comment {
  id
  content
  createdAt
  deletedAt
  parentId
  pageId
  user {
    id
    name
    username
    email
    avatar
  }
  likes {
    id
    userId
  }
}

# Used in pages/widget/comment/[pageId].tsx
subscription commentTree($pageURL: String!) {
  comments(
    where: { page: { url: { _eq: $pageURL } }, parentId: { _is_null: true } }
    order_by: { likes_aggregate: { count: desc }, createdAt: asc }
  ) {
    ...commentItem
    replies(order_by: { likes_aggregate: { count: desc }, createdAt: asc }) {
      ...commentItem
      replies(order_by: { likes_aggregate: { count: desc }, createdAt: asc }) {
        ...commentItem
        replies(
          order_by: { likes_aggregate: { count: desc }, createdAt: asc }
        ) {
          ...commentItem
        }
      }
    }
  }
}

# Query ancestors and children
subscription commentTimeline($id: uuid!) {
  commentByPk(id: $id) {
    ...commentItem
    replies(order_by: { likes_aggregate: { count: desc }, createdAt: asc }) {
      ...commentItem
    }
    parent {
      ...commentItem
      parent {
        ...commentItem
        parent {
          ...commentItem
        }
      }
    }
  }
}

mutation insertOneComment($content: jsonb!, $parentId: uuid, $pageId: uuid!) {
  insertOneComment(
    object: { content: $content, parentId: $parentId, pageId: $pageId }
  ) {
    id
  }
}

mutation deleteOneComment($id: uuid!) {
  updateCommentByPk(
    pk_columns: { id: $id }
    # Make sure all fields are filled if we add more fields here
    _set: { deletedAt: "now()" }
  ) {
    id
  }
}
