fragment adapterUser on User {
  id
  name
  username
  avatar
  email
  emailVerified
  type
  bio
  website
  twitterUserName
}

# Use it with userBeforeUpdate
mutation updateUserByPk(
  $id: uuid!
  $username: String
  $bio: String
  $website: String
  $twitterUserName: String
) {
  updateUserByPk(
    pk_columns: { id: $id }
    _set: {
      username: $username
      bio: $bio
      website: $website
      twitterUserName: $twitterUserName
    }
  ) {
    id
  }
}

query userBeforeUpdate($id: uuid!) {
  userByPk(id: $id) {
    username
    bio
    website
    twitterUserName
  }
}

# Use it with userByPkBeforeUpdate
mutation updateUserProfileByPk(
  $id: uuid!
  $email: String
  $name: String
  $avatar: String
  $emailVerified: timestamptz
) {
  updateUserByPk(
    pk_columns: { id: $id }
    _set: {
      name: $name
      email: $email
      avatar: $avatar
      emailVerified: $emailVerified
    }
  ) {
    ...adapterUser
  }
}

# We must fill the existing user fields before updating it
# as hasura will set it to null if there are missing fields
query userByPkBeforeUpdate($id: uuid!) {
  userByPk(id: $id) {
    id
    email
    name
    avatar
    emailVerified
  }
}

# Use it with userByEmailBeforeUpdate
mutation updateUserProfileByEmail(
  $email: String!
  $name: String
  $avatar: String
  $emailVerified: timestamptz
) {
  updateUsers(
    where: { email: { _eq: $email } }
    _set: { name: $name, avatar: $avatar, emailVerified: $emailVerified }
  ) {
    returning {
      ...adapterUser
    }
  }
}

query userByEmailBeforeUpdate($email: String!) {
  users(where: { email: { _eq: $email } }) {
    id
    name
    email
    avatar
    emailVerified
  }
}

query userByPk($id: uuid!) {
  userByPk(id: $id) {
    id
    email
    username
    type
    avatar
    name
    emailVerified
    updatedAt
    createdAt
  }
}

query userByEmail($email: String!) {
  users(where: { email: { _eq: $email } }) {
    ...adapterUser
  }
}

query userByAccount($provider: String!, $providerAccountId: String!) {
  users(
    where: {
      accounts: {
        provider: { _eq: $provider }
        providerAccountId: { _eq: $providerAccountId }
      }
    }
  ) {
    ...adapterUser
  }
}

query allUsers {
  users {
    username
  }
}

mutation deleteUser($id: uuid!) {
  deleteUserByPk(id: $id) {
    id
  }
}

mutation createUser(
  $name: String
  $username: String
  $email: String
  $emailVerified: timestamptz
  $avatar: String
  $type: UserType_enum
) {
  insertOneUser(
    object: {
      name: $name
      username: $username
      email: $email
      emailVerified: $emailVerified
      avatar: $avatar
      type: $type
    }
  ) {
    ...adapterUser
  }
}
